{"v":3,"name":"expandtesting","folders":[],"requests":[{"body":{"body":null,"contentType":null},"params":[],"method":"GET","testScript":"let responseCAPIH = pw.response.body;\n\npw.test(\"1 - Check api health success\", function () {\n    pw.expect(responseCAPIH.success).toBe(true);\n});\npw.test(\"1 - Check api health status\", function () {\n    pw.expect(responseCAPIH.status).toBe(200);\n});\npw.test(\"1 - Check api health message\", function () {\n    pw.expect(responseCAPIH.message).toBe(\"Notes API is Running\");\n});\n\n","preRequestScript":"","headers":[{"active":true,"value":"","key":"","description":""}],"v":"7","auth":{"authType":"none","authActive":true},"requestVariables":[],"endpoint":"<<base_url>>/health-check","name":"1 - Check the health of the API Notes services"},{"preRequestScript":"var random = Math.floor(Math.random() * 1000)+1000;\npw.env.set(\"randomValue\", random.toString());\nconsole.log(\"randomValue\");\n\npw.env.set(\"user_name\", pw.env.get(\"randomValue\")+\" test\");\n\n// let user_email_upper_case = \"{{$randomEmail}}\";\n// let user_email_lower_case = user_email_upper_case.toLowerCase();\n// pw.env.set(\"user_email\", user_email_lower_case);\npw.env.set(\"user_email\", pw.env.get(\"randomValue\")+\"@test.com\");\n\n// let user_password_preview = \"{{$randomPassword}}\";\n// pw.env.set(\"user_password\", user_password_preview);\npw.env.set(\"user_password\", pw.env.get(\"randomValue\")+\"_pw\");\n\n","headers":[],"endpoint":"<<base_url>>/users/register","auth":{"authActive":true,"authType":"none"},"body":{"body":"{\n    \"name\":\"<<user_name>>\",\n    \"email\":\"<<user_email>>\",\n    \"password\":\"<<user_password>>\"\n}","contentType":"application/json"},"name":"2.1 - Creates a new user account","requestVariables":[],"v":"7","method":"POST","params":[],"testScript":"let responseCU = pw.response.body;\n// let requestCU = pw.request;\n\npw.env.set(\"user_id\", responseCU.data.id);\npw.env.set(\"user_name\", responseCU.data.name);\npw.env.set(\"user_email\", responseCU.data.email);\n// pw.env.set(\"user_password\", requestCU.password);\n\npw.test(\"2.1 - Check creates a new user account success\", function () {\n    pw.expect(responseCU.success).toBe(true);\n});\npw.test(\"2.1 - Check creates a new user account status\", function () {\n    pw.expect(responseCU.status).toBe(201);\n});\npw.test(\"2.1 - Check creates a new user account message\", function () {\n    pw.expect(responseCU.message).toBe(\"User account created successfully\");\n});\npw.test(\"2.1 - Assert created name\", function () {\n    pw.expect(responseCU.data.name).toBe(pw.env.get(\"user_name\"));\n});\npw.test(\"2.1 - Assert created e-mail\", function () {\n    pw.expect(responseCU.data.email).toBe(pw.env.get(\"user_email\"));\n});\n\n"},{"body":{"body":"{\n    \"name\":\"<<user_name>>\",\n    \"email\":\"@<<user_email>>\",\n    \"password\":\"<<user_password>>\"\n}","contentType":"application/json"},"auth":{"authType":"none","authActive":true},"headers":[],"params":[],"requestVariables":[],"method":"POST","preRequestScript":"","endpoint":"<<base_url>>/users/register","name":"2.2 - Creates a new user account  - bad request","v":"7","testScript":"let responseCUBR = pw.response.body;\n\npw.test(\"2.2 - Check creates a new user account - bad request success\", function () {\n    pw.expect(responseCUBR.success).toBe(false);\n});\npw.test(\"2.2 - Check creates a new user account - bad request status\", function () {\n    pw.expect(responseCUBR.status).toBe(400);\n});\npw.test(\"2.2 - Check creates a new user account - bad request message\", function () {\n    pw.expect(responseCUBR.message).toBe(\"A valid email address is required\");\n});"},{"body":{"body":"{\r\n    \"email\":\"<<user_email>>\",\r\n    \"password\":\"<<user_password>>\"\r\n}","contentType":"application/json"},"auth":{"authActive":true,"authType":"none"},"testScript":"let responseLU = pw.response.body;\n\npw.env.set(\"user_token\", responseLU.data.token);\n\npw.test(\"3.1 - Check log in as an existing user success\", function () {\n    pw.expect(responseLU.success).toBe(true);\n});\npw.test(\"3.1 - Check log in as an existing user status\", function () {\n    pw.expect(responseLU.status).toBe(200);\n});\npw.test(\"3.1 - Check log in as an existing user message\", function () {\n    pw.expect(responseLU.message).toBe(\"Login successful\");\n});\npw.test(\"3.1 - Assert user id\", function () {\n    pw.expect(pw.env.get(\"user_id\")).toBe(responseLU.data.id);\n});\npw.test(\"3.1 - Assert user name\", function () {\n    pw.expect(pw.env.get(\"user_name\")).toBe(responseLU.data.name);\n});\npw.test(\"3.1 - Assert user e-mail\", function () {\n    pw.expect(pw.env.get(\"user_email\")).toBe(responseLU.data.email);\n});","name":"3.1 - Log in as an existing user","endpoint":"<<base_url>>/users/login","params":[],"preRequestScript":"","headers":[],"requestVariables":[],"method":"POST","v":"7"},{"v":"7","method":"POST","auth":{"authActive":true,"authType":"none"},"headers":[],"params":[],"endpoint":"<<base_url>>/users/login","requestVariables":[],"preRequestScript":"","testScript":"let responseLUBR = pw.response.body;\n\npw.test(\"3.2 - Check log in as an existing user - bad request success\", function () {\n    pw.expect(responseLUBR.success).toBe(false);\n});\npw.test(\"3.2 - Check log in as an existing user - bad request status\", function () {\n    pw.expect(responseLUBR.status).toBe(400);\n});\npw.test(\"3.2 - Check log in as an existing user - bad request message\", function () {\n    pw.expect(responseLUBR.message).toBe(\"A valid email address is required\");\n});","name":"3.2 - Log in as an existing user - bad request","body":{"body":"{\r\n    \"email\":\"@<<user_email>>\",\r\n    \"password\":\"<<user_password>>\"\r\n}","contentType":"application/json"}},{"headers":[],"body":{"body":"{\r\n    \"email\":\"<<user_email>>\",\r\n    \"password\":\"@<<user_password>>\"\r\n}","contentType":"application/json"},"params":[],"auth":{"authActive":true,"authType":"none"},"requestVariables":[],"name":"3.3 - Log in as an existing user - unauthorized request","preRequestScript":"","testScript":"let responseLUUR = pw.response.body;\n\npw.test(\"3.3 - Check log in as an existing user - unauthorized request success\", function () {\n    pw.expect(responseLUUR.success).toBe(false);\n});\npw.test(\"3.3 - Check log in as an existing user - unauthorized request status\", function () {\n    pw.expect(responseLUUR.status).toBe(401);\n});\npw.test(\"3.3 - Check log in as an existing user - unauthorized request message\", function () {\n    pw.expect(responseLUUR.message).toBe(\"Incorrect email address or password\");\n});","v":"7","method":"POST","endpoint":"<<base_url>>/users/login"},{"requestVariables":[],"headers":[{"value":"<<user_token>>","key":"X-Auth-Token","active":true,"description":""}],"body":{"body":null,"contentType":null},"method":"GET","preRequestScript":"","params":[],"name":"4.1 - Retrieve user profile information","endpoint":"<<base_url>>/users/profile","testScript":"let responseRU = pw.response.body;\n\npw.test(\"4.1 - Check retrieve user profile information success\", function () {\n    pw.expect(responseRU.success).toBe(true);\n});\npw.test(\"4.1 - Check retrieve user profile information status\", function () {\n    pw.expect(responseRU.status).toBe(200);\n});\npw.test(\"4.1 - Check retrieve user profile information message\", function () {\n    pw.expect(responseRU.message).toBe(\"Profile successful\");\n});\npw.test(\"4.1 - Assert user id\", function () {\n    pw.expect(pw.env.get(\"user_id\")).toBe(responseRU.data.id);\n});\npw.test(\"4.1 - Assert user name\", function () {\n    pw.expect(pw.env.get(\"user_name\")).toBe(responseRU.data.name);\n});\npw.test(\"4 - Assert user e-mail\", function () {\n    pw.expect(pw.env.get(\"user_email\")).toBe(responseRU.data.email);\n});","v":"7","auth":{"authType":"none","authActive":true}},{"method":"GET","endpoint":"<<base_url>>/users/profile","body":{"body":null,"contentType":null},"testScript":"let responseRUBR = pw.response.body;\n\npw.test(\"4.2 - Check retrieve user profile information - bad request success\", function () {\n    pw.expect(responseRUBR.success).toBe(false);\n});\npw.test(\"4.2 - Check retrieve user profile information - bad request status\", function () {\n    pw.expect(responseRUBR.status).toBe(400);\n});\npw.test(\"4.2 - Check retrieve user profile information - bad request message\", function () {\n    pw.expect(responseRUBR.message).toBe(\"Invalid X-Content-Format header, Only application/json is supported.\");\n});","headers":[{"description":"","key":"X-Auth-Token","value":"<<user_token>>","active":true},{"value":"badRequest","description":"","key":"x-content-format","active":true}],"requestVariables":[],"params":[],"name":"4.2 - Retrieve user profile information - bad request","v":"7","preRequestScript":"","auth":{"authActive":true,"authType":"none"}},{"testScript":"let responseRUUR = pw.response.body;\n\npw.test(\"4.3 - Check retrieve user profile information - unauthorized request success\", function () {\n    pw.expect(responseRUUR.success).toBe(false);\n});\npw.test(\"4.3 - Check retrieve user profile information - unauthorized request status\", function () {\n    pw.expect(responseRUUR.status).toBe(401);\n});\npw.test(\"4.3 - Check retrieve user profile information - unauthorized request message\", function () {\n    pw.expect(responseRUUR.message).toBe(\"Access token is not valid or has expired, you will need to login\");\n});","params":[],"v":"7","endpoint":"<<base_url>>/users/profile","preRequestScript":"","name":"4.3 - Retrieve user profile information - unauthorized request","requestVariables":[],"body":{"body":null,"contentType":null},"headers":[{"value":"@<<user_token>>","description":"","key":"X-Auth-Token","active":true}],"method":"GET","auth":{"authType":"none","authActive":true}},{"method":"PATCH","body":{"contentType":"application/json","body":"{\n    \"name\":\"<<user_name>>\",\n    \"phone\":\"<<user_phone>>\",\n    \"company\":\"<<user_company>>\"\n}"},"name":"5.1 - Update the user profile information","v":"7","params":[],"auth":{"authType":"none","authActive":true},"endpoint":"<<base_url>>/users/profile","requestVariables":[],"preRequestScript":"var random = Math.floor(Math.random() * 100000)+1000000000;\npw.env.set(\"randomValue\", random.toString());\nconsole.log(\"randomValue\");\n\npw.env.set(\"user_name\", pw.env.get(\"randomValue\")+\" test\");\n\n// let user_email_upper_case = \"{{$randomEmail}}\";\n// let user_email_lower_case = user_email_upper_case.toLowerCase();\n// pw.env.set(\"user_email\", user_email_lower_case);\npw.env.set(\"user_phone\", pw.env.get(\"randomValue\"));\nconsole.log(\"user_phone\")\n// let user_password_preview = \"{{$randomPassword}}\";\n// pw.env.set(\"user_password\", user_password_preview);\npw.env.set(\"user_company\", pw.env.get(\"randomValue\")+\" S.A.\");","headers":[{"value":"<<user_token>>","active":true,"key":"X-Auth-Token","description":""}],"testScript":"let responseUU = pw.response.body;\n// let requestUU = JSON.parse(pm.request.body.raw);\n\n// pw.env.set(\"user_name\", requestUU.name);\n// pw.env.set(\"user_phone\", requestUU.phone);\n// pw.env.set(\"user_company\", requestUU.company);\n\npw.test(\"5.1 - Check update the user profile information success\", function () {\n    pw.expect(responseUU.success).toBe(true);\n});\npw.test(\"5.1 - Check update the user profile information status\", function () {\n    pw.expect(responseUU.status).toBe(200);\n});\npw.test(\"5.1 - Check update the user profile information message\", function () {\n    pw.expect(responseUU.message).toBe(\"Profile updated successful\");\n});\npw.test(\"5.1 - Assert user id\", function () {\n    pw.expect(pw.env.get(\"user_id\")).toBe(responseUU.data.id);\n});\npw.test(\"5.1 - Assert user name\", function () {\n    pw.expect(pw.env.get(\"user_name\")).toBe(responseUU.data.name);\n});\npw.test(\"5.1 - Assert user e-mail\", function () {\n    pw.expect(pw.env.get(\"user_email\")).toBe(responseUU.data.email);\n});\npw.test(\"5.1 - Assert user phone\", function () {\n    pw.expect(pw.env.get(\"user_phone\")).toBe(responseUU.data.phone);\n});\npw.test(\"5.1 - Assert user company\", function () {\n    pw.expect(pw.env.get(\"user_company\")).toBe(responseUU.data.company);\n});\n\n\n"},{"name":"5.2 - Update the user profile information - bad request","endpoint":"<<base_url>>/users/profile","v":"7","testScript":"let responseUUBR = pw.response.body;\n\npw.test(\"5.2 - Check update the user profile information - bad request success\", function () {\n    pw.expect(responseUUBR.success).toBe(false);\n});\npw.test(\"5.2 - Check update the user profile information - bad request status\", function () {\n    pw.expect(responseUUBR.status).toBe(400);\n});\npw.test(\"5.2 - Check update the user profile information - bad request message\", function () {\n    pw.expect(responseUUBR.message).toBe(\"User name must be between 4 and 30 characters\");\n});","requestVariables":[],"auth":{"authActive":true,"authType":"none"},"params":[],"headers":[{"active":true,"key":"X-Auth-Token","description":"","value":"<<user_token>>"}],"preRequestScript":"","method":"PATCH","body":{"contentType":"application/json","body":"{\n    \"name\":\"6@#\",\n    \"phone\":\"<<user_phone>>\",\n    \"company\":\"<<user_company>>\"\n}"}},{"requestVariables":[],"params":[],"testScript":"let responseUUUR = pw.response.body;\n\npw.test(\"5.3 - Check update the user profile information - unauthorized request success\", function () {\n    pw.expect(responseUUUR.success).toBe(false);\n});\npw.test(\"5.3 - Check update the user profile information - unauthorized request status\", function () {\n    pw.expect(responseUUUR.status).toBe(401);\n});\npw.test(\"5.3 - Check update the user profile information - unauthorized request message\", function () {\n    pw.expect(responseUUUR.message).toBe(\"Access token is not valid or has expired, you will need to login\");\n});","endpoint":"<<base_url>>/users/profile","body":{"contentType":"application/json","body":"{\n    \"name\":\"<<user_name>>\",\n    \"phone\":\"<<user_phone>>\",\n    \"company\":\"<<user_company>>\"\n}"},"auth":{"authActive":true,"authType":"none"},"headers":[{"description":"","key":"X-Auth-Token","active":true,"value":"@<<user_token>>"}],"preRequestScript":"","method":"PATCH","v":"7","name":"5.3 - Update the user profile information - unauthorized request"},{"params":[],"body":{"body":"{\n    \"currentPassword\":\"<<user_password>>\",\n    \"newPassword\":\"<<new_user_password>>\"\n}","contentType":"application/json"},"testScript":"let responseCUP = pw.response.body;\n\npw.env.set(\"user_password\", pw.env.get(\"new_user_password\"));\n\npw.test(\"6.1 - Check api health success\", function () {\n    pw.expect(responseCUP.success).toBe(true);\n});\npw.test(\"6.1 - Check api health status\", function () {\n    pw.expect(responseCUP.status).toBe(200);\n});\npw.test(\"6.1 - Check api health message\", function () {\n    pw.expect(responseCUP.message).toBe(\"The password was successfully updated\");\n});","endpoint":"<<base_url>>/users/change-password","name":"6.1 - Change a user's password","requestVariables":[],"headers":[{"key":"X-Auth-Token","description":"","active":true,"value":"<<user_token>>"}],"v":"7","auth":{"authType":"none","authActive":true},"preRequestScript":"var random = Math.floor(Math.random() * 1000)+1000;\npw.env.set(\"randomValue\", random.toString());\nconsole.log(\"randomValue\");\n\npw.env.set(\"new_user_password\", pw.env.get(\"randomValue\")+\"_new_pw\");","method":"POST"},{"v":"7","auth":{"authType":"none","authActive":true},"method":"POST","body":{"body":"{\r\n    \"currentPassword\":\"<<user_password>>\",\r\n    \"newPassword\":\"123\"\r\n}","contentType":"application/json"},"testScript":"let responseCUPBR = pw.response.body;\n\npw.test(\"6.2 - Check api health - bad request success\", function () {\n    pw.expect(responseCUPBR.success).toBe(false);\n});\npw.test(\"6.2 - Check api health - bad request status\", function () {\n    pw.expect(responseCUPBR.status).toBe(400);\n});\npw.test(\"6.2 - Check api health - bad request message\", function () {\n    pw.expect(responseCUPBR.message).toBe(\"New password must be between 6 and 30 characters\");\n});","params":[],"requestVariables":[],"headers":[{"key":"X-Auth-Token","value":"<<user_token>>","active":true,"description":""}],"name":"6.2 - Change a user's password - bad request","endpoint":"<<base_url>>/users/change-password","preRequestScript":""},{"params":[],"preRequestScript":"","testScript":"let responseCUPUR = pw.response.body;\n\npw.test(\"6.3 - Check api health - unauthorized request success\", function () {\n    pw.expect(responseCUPUR.success).toBe(false);\n});\npw.test(\"6.3 - Check api health - unauthorized request status\", function () {\n    pw.expect(responseCUPUR.status).toBe(401);\n});\npw.test(\"6.3 - Check api health - unauthorized request message\", function () {\n    pw.expect(responseCUPUR.message).toBe(\"Access token is not valid or has expired, you will need to login\");\n});","body":{"body":"{\n    \"currentPassword\":\"<<user_password>>\",\n    \"newPassword\":\"<<new_user_password>>\"\n}","contentType":"application/json"},"requestVariables":[],"v":"7","method":"POST","endpoint":"<<base_url>>/users/change-password","name":"6.3 - Change a user's password - unauthorized request","headers":[{"active":true,"key":"X-Auth-Token","description":"","value":"@<<user_token>>"}],"auth":{"authActive":true,"authType":"none"}},{"headers":[{"value":"<<user_token>>","key":"X-Auth-Token","description":"","active":true}],"body":{"body":"{\n    \"title\":\"<<note_title>>\",\n    \"description\":\"<<note_description>>\",\n    \"category\":\"<<note_category>>\"\n}","contentType":"application/json"},"method":"POST","requestVariables":[],"auth":{"authType":"none","authActive":true},"endpoint":"<<base_url>>/notes","preRequestScript":"var categoryArray = ['Home', 'Work', 'Personal'];\nvar random = Math.floor(Math.random() * 1000)+1000;\npw.env.set(\"randomValue\", random.toString());\nconsole.log(\"randomValue\");\n\npw.env.set(\"note_category\", categoryArray[Math.floor(Math.random()*categoryArray.length)]);\npw.env.set(\"note_description\", pw.env.get(\"randomValue\")+\" description\");\npw.env.set(\"note_title\", pw.env.get(\"randomValue\")+\" title\");\n","testScript":"let responseCN = pw.response.body;\n\npw.env.set(\"note_id\", responseCN.data.id);\n// Hoppscotch fails to grab boolean value from response body\npw.env.set(\"note_completed\", responseCN.data.completed.toString());\npw.env.set(\"note_created_at\", responseCN.data.created_at);\npw.env.set(\"note_updated_at\", responseCN.data.updated_at);\n\npw.test(\"7.1 - Check creates a new note success\", function () {\n    pw.expect(responseCN.success).toBe(true);\n});\npw.test(\"7.1 - Check creates a new note status\", function () {\n    pw.expect(responseCN.status).toBe(200);\n});\npw.test(\"7.1 - Check creates a new note message\", function () {\n    pw.expect(responseCN.message).toBe(\"Note successfully created\");\n});\npw.test(\"7.1 - Assert note title\", function () {\n    pw.expect(pw.env.get(\"note_title\")).toBe(responseCN.data.title);\n});\npw.test(\"7.1 - Assert note description\", function () {\n    pw.expect(pw.env.get(\"note_description\")).toBe(responseCN.data.description);\n});\npw.test(\"7.1 - Assert note category\", function () {\n    pw.expect(pw.env.get(\"note_category\")).toBe(responseCN.data.category);\n});\npw.test(\"7.1 - Assert user id\", function () {\n    pw.expect(pw.env.get(\"user_id\")).toBe(responseCN.data.user_id);\n});","params":[],"name":"7.1 - Creates a new note","v":"7"},{"method":"POST","requestVariables":[],"v":"7","endpoint":"<<base_url>>/notes","name":"7.2 - Creates a new note - bad request","body":{"contentType":"application/json","body":"{\n    \"title\":\"<<note_title>>\",\n    \"description\":\"<<note_description>>\",\n    \"category\":\"a\"\n}"},"preRequestScript":"","headers":[{"key":"X-Auth-Token","active":true,"value":"<<user_token>>","description":""}],"params":[],"testScript":"let responseCNBR = pw.response.body;\n\npw.test(\"7.2 - Check creates a new note - bad request success\", function () {\n    pw.expect(responseCNBR.success).toBe(false);\n});\npw.test(\"7.2 - Check creates a new note - bad request status\", function () {\n    pw.expect(responseCNBR.status).toBe(400);\n});\npw.test(\"7.2 - Check creates a new note - bad request message\", function () {\n    pw.expect(responseCNBR.message).toBe(\"Category must be one of the categories: Home, Work, Personal\");\n});\n","auth":{"authActive":true,"authType":"none"}},{"preRequestScript":"","method":"POST","name":"7.3 - Creates a new note - unauthorized request","headers":[{"description":"","key":"X-Auth-Token","value":"@<<user_token>>","active":true}],"endpoint":"<<base_url>>/notes","requestVariables":[],"params":[],"body":{"contentType":"application/json","body":"{\n    \"title\":\"<<note_title>>\",\n    \"description\":\"<<note_description>>\",\n    \"category\":\"<<note_category>>\"\n}"},"v":"7","auth":{"authActive":true,"authType":"none"},"testScript":"let responseCNUR = pw.response.body;\n\npw.test(\"7.3 - Check creates a new note - unauthorized request success\", function () {\n    pw.expect(responseCNUR.success).toBe(false);\n});\npw.test(\"7.3 - Check creates a new note - unauthorized request status\", function () {\n    pw.expect(responseCNUR.status).toBe(401);\n});\npw.test(\"7.3 - Check creates a new note - unauthorized request message\", function () {\n    pw.expect(responseCNUR.message).toBe(\"Access token is not valid or has expired, you will need to login\");\n});\n"},{"method":"POST","endpoint":"<<base_url>>/notes","params":[],"auth":{"authType":"none","authActive":true},"name":"8 - Creates another new note","body":{"contentType":"application/json","body":"{\n    \"title\":\"<<note_title_2>>\",\n    \"description\":\"<<note_description_2>>\",\n    \"category\":\"<<note_category_2>>\"\n}"},"testScript":"let responseCN = pw.response.body;\n\npw.env.set(\"note_id_2\", responseCN.data.id);\n// Hoppscotch fails to grab boolean value from response body\npw.env.set(\"note_completed_2\", responseCN.data.completed.toString());\npw.env.set(\"note_created_at_2\", responseCN.data.created_at);\npw.env.set(\"note_updated_at_2\", responseCN.data.updated_at);\n\npw.test(\"8 - Check creates a new note success\", function () {\n    pw.expect(responseCN.success).toBe(true);\n});\npw.test(\"8 - Check creates a new note status\", function () {\n    pw.expect(responseCN.status).toBe(200);\n});\npw.test(\"8 - Check creates a new note message\", function () {\n    pw.expect(responseCN.message).toBe(\"Note successfully created\");\n});\npw.test(\"8 - Assert note title\", function () {\n    pw.expect(pw.env.get(\"note_title_2\")).toBe(responseCN.data.title);\n});\npw.test(\"8 - Assert note description\", function () {\n    pw.expect(pw.env.get(\"note_description_2\")).toBe(responseCN.data.description);\n});\npw.test(\"8 - Assert note category\", function () {\n    pw.expect(pw.env.get(\"note_category_2\")).toBe(responseCN.data.category);\n});\npw.test(\"8 - Assert user id\", function () {\n    pw.expect(pw.env.get(\"user_id\")).toBe(responseCN.data.user_id);\n});","preRequestScript":"var categoryArray = ['Home', 'Work', 'Personal'];\nvar random = Math.floor(Math.random() * 1000)+1000;\npw.env.set(\"randomValue\", random.toString());\nconsole.log(\"randomValue\");\n\npw.env.set(\"note_category_2\", categoryArray[Math.floor(Math.random()*categoryArray.length)]);\npw.env.set(\"note_description_2\", pw.env.get(\"randomValue\")+\" description\");\npw.env.set(\"note_title_2\", pw.env.get(\"randomValue\")+\" title\");","headers":[{"value":"<<user_token>>","key":"X-Auth-Token","description":"","active":true}],"v":"7","requestVariables":[]},{"headers":[{"value":"<<user_token>>","active":true,"description":"","key":"X-Auth-Token"}],"name":"9.1 - Get all notes","method":"GET","auth":{"authType":"none","authActive":true},"preRequestScript":"","endpoint":"<<base_url>>/notes","body":{"body":null,"contentType":null},"params":[],"v":"7","testScript":"let responseGAN = pw.response.body;\n\npw.test(\"9.1 - Check get all notes success\", function () {\n    pw.expect(responseGAN.success).toBe(true);\n});\npw.test(\"9.1 - Check get all notes status\", function () {\n    pw.expect(responseGAN.status).toBe(200);\n});\npw.test(\"9.1 - Check get all notes message\", function () {\n    pw.expect(responseGAN.message).toBe(\"Notes successfully retrieved\");\n});\npw.test(\"9.1 - Assert note id\", function () {\n    pw.expect(pw.env.get(\"note_id\")).toBe(responseGAN.data[1].id);\n});\npw.test(\"9.1 - Assert note title\", function () {\n    pw.expect(pw.env.get(\"note_title\")).toBe(responseGAN.data[1].title);\n});\npw.test(\"9.1 - Assert note description\", function () {\n    pw.expect(pw.env.get(\"note_description\")).toBe(responseGAN.data[1].description);\n});\npw.test(\"9.1 - Assert note category\", function () {\n    pw.expect(pw.env.get(\"note_category\")).toBe(responseGAN.data[1].category);\n});\npw.test(\"9.1 - Assert note completed\", function () {\n    pw.expect(pw.env.get(\"note_completed\")).toBe(responseGAN.data[1].completed.toString());\n});\npw.test(\"9.1 - Assert note created_at\", function () {\n    pw.expect(pw.env.get(\"note_created_at\")).toBe(responseGAN.data[1].created_at);\n});\npw.test(\"9.1 - Assert note updated_at\", function () {\n    pw.expect(pw.env.get(\"note_updated_at\")).toBe(responseGAN.data[1].updated_at);\n});\npw.test(\"9.1 - Assert user id for note\", function () {\n    pw.expect(pw.env.get(\"user_id\")).toBe(responseGAN.data[1].user_id);\n});\npw.test(\"9.1 - Assert note 2 id\", function () {\n    pw.expect(pw.env.get(\"note_id_2\")).toBe(responseGAN.data[0].id);\n});\npw.test(\"9.1 - Assert note 2 title\", function () {\n    pw.expect(pw.env.get(\"note_title_2\")).toBe(responseGAN.data[0].title);\n});\npw.test(\"9.1 - Assert note 2 description\", function () {\n    pw.expect(pw.env.get(\"note_description_2\")).toBe(responseGAN.data[0].description);\n});\npw.test(\"9.1 - Assert note 2 category\", function () {\n    pw.expect(pw.env.get(\"note_category_2\")).toBe(responseGAN.data[0].category);\n});\npw.test(\"9.1 - Assert note 2 completed\", function () {\n    pw.expect(pw.env.get(\"note_completed_2\")).toBe(responseGAN.data[0].completed.toString());\n});\npw.test(\"9.1 - Assert note 2 created_at\", function () {\n    pw.expect(pw.env.get(\"note_created_at_2\")).toBe(responseGAN.data[0].created_at);\n});\npw.test(\"9.1 - Assert note 2 updated_at\", function () {\n    pw.expect(pw.env.get(\"note_updated_at_2\")).toBe(responseGAN.data[0].updated_at);\n});\npw.test(\"9.1 - Assert user id for note 2\", function () {\n    pw.expect(pw.env.get(\"user_id\")).toBe(responseGAN.data[0].user_id);\n});\n","requestVariables":[]},{"auth":{"authActive":true,"authType":"none"},"endpoint":"<<base_url>>/notes","preRequestScript":"","params":[],"requestVariables":[],"headers":[{"active":true,"key":"X-Auth-Token","description":"","value":"<<user_token>>"},{"value":"badRequest","active":true,"description":"","key":"x-content-format"}],"method":"GET","name":"9.2 - Get all notes - bad request","testScript":"let responseGANBR = pw.response.body;\n\npw.test(\"9.2 - Check get all notes - bad request success\", function () {\n    pw.expect(responseGANBR.success).toBe(false);\n});\npw.test(\"9.2 - Check get all notes - bad request status\", function () {\n    pw.expect(responseGANBR.status).toBe(400);\n});\npw.test(\"9.2 - Check get all notes - bad request message\", function () {\n    pw.expect(responseGANBR.message).toBe(\"Invalid X-Content-Format header, Only application/json is supported.\");\n});","v":"7","body":{"body":null,"contentType":null}},{"name":"9.3 - Get all notes - unauthorized request","method":"GET","params":[],"body":{"contentType":null,"body":null},"requestVariables":[],"v":"7","testScript":"let responseGANUR = pw.response.body;\n\npw.test(\"9.3 - Check get all notes - unauthorized request success\", function () {\n    pw.expect(responseGANUR.success).toBe(false);\n});\npw.test(\"9.3 - Check get all notes - unauthorized request status\", function () {\n    pw.expect(responseGANUR.status).toBe(401);\n});\npw.test(\"9.3 - Check get all notes - unauthorized request message\", function () {\n    pw.expect(responseGANUR.message).toBe(\"Access token is not valid or has expired, you will need to login\");\n});","headers":[{"active":true,"description":"","value":"@<<user_token>>","key":"X-Auth-Token"},{"description":"","key":"","value":"","active":true}],"endpoint":"<<base_url>>/notes","auth":{"authType":"none","authActive":true},"preRequestScript":""},{"headers":[{"key":"X-Auth-Token","value":"<<user_token>>","description":"","active":true}],"params":[],"body":{"contentType":null,"body":null},"v":"7","endpoint":"<<base_url>>/notes/<<note_id>>","auth":{"authType":"none","authActive":true},"requestVariables":[],"name":"10.1 - Get note by ID","testScript":"let responseGN = pw.response.body;\n\npw.test(\"10.1 - Check get note by ID success\", function () {\n    pw.expect(responseGN.success).toBe(true);\n});\npw.test(\"10.1 - Check get note by ID status\", function () {\n    pw.expect(responseGN.status).toBe(200);\n});\npw.test(\"10.1 - Check get note by ID message\", function () {\n    pw.expect(responseGN.message).toBe(\"Note successfully retrieved\");\n});\npw.test(\"10.1 - Assert note id\", function () {\n    pw.expect(pw.env.get(\"note_id\")).toBe(responseGN.data.id);\n});\npw.test(\"10.1 - Assert note title\", function () {\n    pw.expect(pw.env.get(\"note_title\")).toBe(responseGN.data.title);\n});\npw.test(\"10.1 - Assert note description\", function () {\n    pw.expect(pw.env.get(\"note_description\")).toBe(responseGN.data.description);\n});\npw.test(\"10.1 - Assert note category\", function () {\n    pw.expect(pw.env.get(\"note_category\")).toBe(responseGN.data.category);\n});\npw.test(\"10.1 - Assert note completed\", function () {\n    pw.expect(pw.env.get(\"note_completed\")).toBe(responseGN.data.completed.toString());\n});\npw.test(\"10.1 - Assert note created_at\", function () {\n    pw.expect(pw.env.get(\"note_created_at\")).toBe(responseGN.data.created_at);\n});\npw.test(\"10.1 - Assert note updated_at\", function () {\n    pw.expect(pw.env.get(\"note_updated_at\")).toBe(responseGN.data.updated_at);\n});\npw.test(\"10.1 - Assert user id for note\", function () {\n    pw.expect(pw.env.get(\"user_id\")).toBe(responseGN.data.user_id);\n});","method":"GET","preRequestScript":""},{"body":{"body":null,"contentType":null},"endpoint":"<<base_url>>/notes/<<note_id>>","auth":{"authActive":true,"authType":"none"},"v":"7","headers":[{"active":true,"description":"","value":"<<user_token>>","key":"X-Auth-Token"},{"active":true,"description":"","key":"x-content-format","value":"badRequest"}],"preRequestScript":"","params":[],"testScript":"let responseGNBR = pw.response.body;\n\npw.test(\"10.2 - Check get note by ID - bad request success\", function () {\n    pw.expect(responseGNBR.success).toBe(false);\n});\npw.test(\"10.2 - Check get note by ID - bad request status\", function () {\n    pw.expect(responseGNBR.status).toBe(400);\n});\npw.test(\"10.2 - Check get note by ID - bad request message\", function () {\n    pw.expect(responseGNBR.message).toBe(\"Invalid X-Content-Format header, Only application/json is supported.\");\n});","method":"GET","name":"10.2 - Get note by ID - bad request","requestVariables":[]},{"method":"GET","params":[],"name":"10.3 - Get note by ID - unauthorized request","endpoint":"<<base_url>>/notes/<<note_id>>","auth":{"authActive":true,"authType":"none"},"requestVariables":[],"testScript":"let responseGNUR = pw.response.body;\n\npw.test(\"10.3 - Check get note by ID - unauthorized request success\", function () {\n    pw.expect(responseGNUR.success).toBe(false);\n});\npw.test(\"10.3 - Check get note by ID - unauthorized request status\", function () {\n    pw.expect(responseGNUR.status).toBe(401);\n});\npw.test(\"10.3 - Check get note by ID - unauthorized request message\", function () {\n    pw.expect(responseGNUR.message).toBe(\"Access token is not valid or has expired, you will need to login\");\n});","headers":[{"active":true,"description":"","key":"X-Auth-Token","value":"@<<user_token>>"},{"key":"","description":"","active":true,"value":""}],"body":{"contentType":null,"body":null},"v":"7","preRequestScript":""},{"auth":{"authActive":true,"authType":"none"},"name":"11.1 - Update an existing note","method":"PUT","params":[],"requestVariables":[],"body":{"body":"{\n    \"title\":\"<<note_title>>\",\n    \"description\":\"<<note_description>>\",\n    \"category\":\"<<note_category>>\",\n    \"completed\":\"<<note_completed>>\"\n}","contentType":"application/json"},"endpoint":"<<base_url>>/notes/<<note_id>>","v":"7","testScript":"let responseUN = pw.response.body;\n\npw.test(\"11.1  - Check update an existing note success\", function () {\n    pw.expect(responseUN.success).toBe(true);\n});\npw.test(\"11.1  - Check update an existing note status\", function () {\n    pw.expect(responseUN.status).toBe(200);\n});\npw.test(\"11.1  - Check update an existing note message\", function () {\n    pw.expect(responseUN.message).toBe(\"Note successfully Updated\");\n});\npw.test(\"11.1  - Assert note id\", function () {\n    pw.expect(pw.env.get(\"note_id\")).toBe(responseUN.data.id);\n});\npw.test(\"11.1  - Assert note title\", function () {\n    pw.expect(pw.env.get(\"note_title\")).toBe(responseUN.data.title);\n});\npw.test(\"11.1  - Assert note description\", function () {\n    pw.expect(pw.env.get(\"note_description\")).toBe(responseUN.data.description);\n});\npw.test(\"11.1  - Assert note category\", function () {\n    pw.expect(pw.env.get(\"note_category\")).toBe(responseUN.data.category);\n});\npw.test(\"11.1  - Assert note completed\", function () {\n    // It uses == due to the fact that the compared values are a boolean and a string\n    pw.expect(pw.env.get(\"note_completed\")).toBe(responseUN.data.completed.toString());\n});\npw.test(\"11.1  - Assert note created_at\", function () {\n    pw.expect(pw.env.get(\"note_created_at\")).toBe(responseUN.data.created_at);\n});\npw.test(\"11.1  - Assert user id for note\", function () {\n    pw.expect(pw.env.get(\"user_id\")).toBe(responseUN.data.user_id);\n});","preRequestScript":"var categoryArray = ['Home', 'Work', 'Personal'];\nvar random = Math.floor(Math.random() * 1000)+1000;\npw.env.set(\"randomValue\", random.toString());\nconsole.log(\"randomValue\");\n\npw.env.set(\"note_category\", categoryArray[Math.floor(Math.random()*categoryArray.length)]);\npw.env.set(\"note_description\", pw.env.get(\"randomValue\")+\" description\");\npw.env.set(\"note_title\", pw.env.get(\"randomValue\")+\" title\");\npw.env.set(\"note_completed\", \"true\");","headers":[{"active":true,"description":"","value":"<<user_token>>","key":"X-Auth-Token"}]},{"headers":[{"active":true,"description":"","key":"X-Auth-Token","value":"<<user_token>>"}],"name":"11.2 - Update an existing note - bad request","preRequestScript":"","params":[],"endpoint":"<<base_url>>/notes/<<note_id>>","requestVariables":[],"method":"PUT","body":{"body":"{\n    \"title\":\"<<note_title>>\",\n    \"description\":\"<<note_description>>\",\n    \"category\":\"a\",\n    \"completed\":\"<<note_completed>>\"\n}","contentType":"application/json"},"v":"7","auth":{"authType":"none","authActive":true},"testScript":"let responseUNBR = pw.response.body;\n\npw.test(\"11.2  - Check update an existing note - bad request success\", function () {\n    pw.expect(responseUNBR.success).toBe(false);\n});\npw.test(\"11.2  - Check update an existing note - bad request status\", function () {\n    pw.expect(responseUNBR.status).toBe(400);\n});\npw.test(\"11.2  - Check update an existing note - bad request message\", function () {\n    pw.expect(responseUNBR.message).toBe(\"Category must be one of the categories: Home, Work, Personal\");\n});"},{"auth":{"authType":"none","authActive":true},"name":"11.3 - Update an existing note - unauthorized request","endpoint":"<<base_url>>/notes/<<note_id>>","params":[],"headers":[{"key":"X-Auth-Token","value":"@<<user_token>>","description":"","active":true}],"preRequestScript":"","testScript":"let responseUNBR = pw.response.body;\n\npw.test(\"11.3  - Check update an existing note - unauthorized request success\", function () {\n    pw.expect(responseUNBR.success).toBe(false);\n});\npw.test(\"11.3  - Check update an existing note - unauthorized request status\", function () {\n    pw.expect(responseUNBR.status).toBe(401);\n});\npw.test(\"11.3  - Check update an existing note - unauthorized request message\", function () {\n    pw.expect(responseUNBR.message).toBe(\"Access token is not valid or has expired, you will need to login\");\n});","method":"PUT","v":"7","body":{"body":"{\n    \"title\":\"<<note_title>>\",\n    \"description\":\"<<note_description>>\",\n    \"category\":\"<<note_category>>\",\n    \"completed\":\"<<note_completed>>\"\n}","contentType":"application/json"},"requestVariables":[]},{"preRequestScript":"if (pw.env.get(\"note_completed\") == false) { \npw.env.set(\"note_completed\", \"true\");\n}\nelse { \npw.env.set(\"note_completed\", \"false\");\n}","testScript":"let responseUCSN = pw.response.body;\n\npw.test(\"12.1 - Check update the completed status of a note success\", function () {\n    pw.expect(responseUCSN.success).toBe(true);\n});\npw.test(\"12.1 - Check update the completed status of a note status\", function () {\n    pw.expect(responseUCSN.status).toBe(200);\n});\npw.test(\"12.1 - Check update the completed status of a note message\", function () {\n    pw.expect(responseUCSN.message).toBe(\"Note successfully Updated\");\n});\npw.test(\"12.1 - Assert note id\", function () {\n    pw.expect(pw.env.get(\"note_id\")).toBe(responseUCSN.data.id);\n});\npw.test(\"12.1 - Assert note title\", function () {\n    pw.expect(pw.env.get(\"note_title\")).toBe(responseUCSN.data.title);\n});\npw.test(\"12.1 - Assert note description\", function () {\n    pw.expect(pw.env.get(\"note_description\")).toBe(responseUCSN.data.description);\n});\npw.test(\"12.1 - Assert note category\", function () {\n    pw.expect(pw.env.get(\"note_category\")).toBe(responseUCSN.data.category);\n});\npw.test(\"12.1 - Assert note completed\", function () {\n    // It uses == due to the fact that the compared values are a boolean and a string\n    pw.expect(pw.env.get(\"note_completed\")).toBe(responseUCSN.data.completed.toString());\n});\npw.test(\"12.1 - Assert note created_at\", function () {\n    pw.expect(pw.env.get(\"note_created_at\")).toBe(responseUCSN.data.created_at);\n});\npw.test(\"12.1 - Assert user id for note\", function () {\n    pw.expect(pw.env.get(\"user_id\")).toBe(responseUCSN.data.user_id);\n});","params":[],"requestVariables":[],"headers":[{"value":"<<user_token>>","active":true,"key":"X-Auth-Token","description":""}],"v":"7","auth":{"authActive":true,"authType":"none"},"method":"PATCH","name":"12.1 - Update the completed status of a note","body":{"body":"{\r\n    \"completed\":\"<<note_completed>>\"\r\n}","contentType":"application/json"},"endpoint":"<<base_url>>/notes/<<note_id>>"},{"body":{"body":"{\r\n    \"completed\":\"a\"\r\n}","contentType":"application/json"},"headers":[{"key":"X-Auth-Token","active":true,"value":"<<user_token>>","description":""}],"method":"PATCH","preRequestScript":"","v":"7","endpoint":"<<base_url>>/notes/<<note_id>>","name":"12.2 - Update the completed status of a note - bad request","params":[],"requestVariables":[],"testScript":"let responseUCSNBR = pw.response.body;\n\npw.test(\"12.2 - Check update the completed status of a note - bad request success\", function () {\n    pw.expect(responseUCSNBR.success).toBe(false);\n});\npw.test(\"12.2 - Check update the completed status of a note - bad request status\", function () {\n    pw.expect(responseUCSNBR.status).toBe(400);\n});\npw.test(\"12.2 - Check update the completed status of a note - bad request message\", function () {\n    pw.expect(responseUCSNBR.message).toBe(\"Note completed status must be boolean\");\n});","auth":{"authType":"none","authActive":true}},{"body":{"contentType":"application/json","body":"{\n    \"completed\":\"<<note_completed>>\"\n}"},"method":"PATCH","name":"12.3 - Update the completed status of a note - unauthorized request","requestVariables":[],"params":[],"endpoint":"<<base_url>>/notes/<<note_id>>","testScript":"let responseUCSNUR = pw.response.body;\n\npw.test(\"12.3 - Check update the completed status of a note - unauthorized request success\", function () {\n    pw.expect(responseUCSNUR.success).toBe(false);\n});\npw.test(\"12.3 - Check update the completed status of a note - unauthorized request status\", function () {\n    pw.expect(responseUCSNUR.status).toBe(401);\n});\npw.test(\"12.3 - Check update the completed status of a note - unauthorized request message\", function () {\n    pw.expect(responseUCSNUR.message).toBe(\"Access token is not valid or has expired, you will need to login\");\n});","headers":[{"active":true,"description":"","value":"@<<user_token>>","key":"X-Auth-Token"}],"auth":{"authType":"none","authActive":true},"preRequestScript":"if (pw.env.get(\"note_completed\") == false) { \npw.env.set(\"note_completed\", \"true\");\n}\nelse { \npw.env.set(\"note_completed\", \"false\");\n}","v":"7"},{"body":{"body":null,"contentType":null},"testScript":"let responseDNBR = pw.response.body;\n\npw.test(\"13.1 - Check delete a note by ID - bad request success\", function () {\n    pw.expect(responseDNBR.success).toBe(false);\n});\npw.test(\"13.1 - Check delete a note by ID - bad request status\", function () {\n    pw.expect(responseDNBR.status).toBe(400);\n});\npw.test(\"13.1 - Check delete a note by ID - bad request message\", function () {\n    pw.expect(responseDNBR.message).toBe(\"Note ID must be a valid ID\");\n});","endpoint":"<<base_url>>/notes/@<<note_id>>","params":[],"name":"13.1 - Delete a note by ID - bad request","requestVariables":[],"preRequestScript":"","method":"DELETE","auth":{"authActive":true,"authType":"none"},"headers":[{"description":"","value":"<<user_token>>","key":"X-Auth-Token","active":true}],"v":"7"},{"body":{"body":null,"contentType":null},"endpoint":"<<base_url>>/notes/<<note_id>>","name":"13.2 - Delete a note by ID - unauthorized request","requestVariables":[],"headers":[{"description":"","key":"X-Auth-Token","value":"@<<user_token>>","active":true}],"preRequestScript":"","testScript":"let responseDNUR = pw.response.body;\n\npw.test(\"13.2 - Check delete a note by ID - unauthorized request success\", function () {\n    pw.expect(responseDNUR.success).toBe(false);\n});\npw.test(\"13.2 - Check delete a note by ID - unauthorized request status\", function () {\n    pw.expect(responseDNUR.status).toBe(401);\n});\npw.test(\"13.2 - Check delete a note by ID - unauthorized request message\", function () {\n    pw.expect(responseDNUR.message).toBe(\"Access token is not valid or has expired, you will need to login\");\n});","v":"7","params":[],"method":"DELETE","auth":{"authType":"none","authActive":true}},{"method":"DELETE","requestVariables":[],"testScript":"let responseDN = pw.response.body;\n\npw.test(\"13.3 - Check delete a note by ID success\", function () {\n    pw.expect(responseDN.success).toBe(true);\n});\npw.test(\"13.3 - Check delete a note by ID status\", function () {\n    pw.expect(responseDN.status).toBe(200);\n});\npw.test(\"13.3 - Check delete a note by ID message\", function () {\n    pw.expect(responseDN.message).toBe(\"Note successfully deleted\");\n});","preRequestScript":"","params":[],"body":{"body":null,"contentType":null},"auth":{"authActive":true,"authType":"none"},"v":"7","name":"13.3 - Delete a note by ID","endpoint":"<<base_url>>/notes/<<note_id>>","headers":[{"active":true,"value":"<<user_token>>","description":"","key":"X-Auth-Token"}]},{"v":"7","preRequestScript":"","auth":{"authType":"none","authActive":true},"requestVariables":[],"testScript":"let responseLOUBR = pw.response.body;\n\npw.test(\"14.1 - Check log out a user - bad request success\", function () {\n    pw.expect(responseLOUBR.success).toBe(false);\n});\npw.test(\"14.1 - Check log out a user - bad request status\", function () {\n    pw.expect(responseLOUBR.status).toBe(400);\n});\npw.test(\"14.1 - Check log out a user - bad request message\", function () {\n    pw.expect(responseLOUBR.message).toBe(\"Invalid X-Content-Format header, Only application/json is supported.\");\n});","headers":[{"active":true,"value":"<<user_token>>","key":"X-Auth-Token","description":""},{"value":"badRequest","active":true,"description":"","key":"x-content-format"}],"endpoint":"<<base_url>>/users/logout","body":{"body":null,"contentType":null},"name":"14.1 - Log out a user - bad request","params":[],"method":"DELETE"},{"requestVariables":[],"params":[],"auth":{"authActive":true,"authType":"none"},"preRequestScript":"","method":"DELETE","body":{"body":null,"contentType":null},"testScript":"let responseLOUUR = pw.response.body;\n\npw.test(\"14.2 - Check log out a user - unauthorized request success\", function () {\n    pw.expect(responseLOUUR.success).toBe(false);\n});\npw.test(\"14.2 - Check log out a user - unauthorized request status\", function () {\n    pw.expect(responseLOUUR.status).toBe(401);\n});\npw.test(\"14.2 - Check log out a user - unauthorized request message\", function () {\n    pw.expect(responseLOUUR.message).toBe(\"Access token is not valid or has expired, you will need to login\");\n});","headers":[{"active":true,"key":"X-Auth-Token","description":"","value":"@<<user_token>>"},{"key":"","active":true,"description":"","value":""}],"v":"7","endpoint":"<<base_url>>/users/logout","name":"14.2 - Log out a user - unauthorized request"},{"body":{"body":null,"contentType":null},"testScript":"let responseLOU = pw.response.body;\n\npw.test(\"14.3 - Check log out a user success\", function () {\n    pw.expect(responseLOU.success).toBe(true);\n});\npw.test(\"14.3 - Check log out a user status\", function () {\n    pw.expect(responseLOU.status).toBe(200);\n});\npw.test(\"14.3 - Check log out a user message\", function () {\n    pw.expect(responseLOU.message).toBe(\"User has been successfully logged out\");\n});","v":"7","preRequestScript":"","headers":[{"key":"X-Auth-Token","value":"<<user_token>>","description":"","active":true}],"requestVariables":[],"params":[],"name":"14.3 - Log out a user","auth":{"authType":"none","authActive":true},"endpoint":"<<base_url>>/users/logout","method":"DELETE"},{"requestVariables":[],"auth":{"authType":"none","authActive":true},"name":"15 - Log in after log out","endpoint":"<<base_url>>/users/login","body":{"body":"{\r\n    \"email\":\"<<user_email>>\",\r\n    \"password\":\"<<user_password>>\"\r\n}","contentType":"application/json"},"preRequestScript":"","v":"7","method":"POST","headers":[],"params":[],"testScript":"let responseLIALOU = pw.response.body;\n\npw.env.set(\"user_token\", responseLIALOU.data.token);\n\npw.test(\"15 - Check log in after log out success\", function () {\n    pw.expect(responseLIALOU.success).toBe(true);\n});\npw.test(\"15 - Check log in after log out status\", function () {\n    pw.expect(responseLIALOU.status).toBe(200);\n});\npw.test(\"15 - Check log in after log out message\", function () {\n    pw.expect(responseLIALOU.message).toBe(\"Login successful\");\n});\npw.test(\"15 - Assert user id\", function () {\n    pw.expect(pw.env.get(\"user_id\")).toBe(responseLIALOU.data.id);\n});\npw.test(\"15 - Assert user name\", function () {\n    pw.expect(pw.env.get(\"user_name\")).toBe(responseLIALOU.data.name);\n});\npw.test(\"15 - Assert user e-mail\", function () {\n    pw.expect(pw.env.get(\"user_email\")).toBe(responseLIALOU.data.email);\n});"},{"headers":[{"key":"X-Auth-Token","active":true,"value":"<<user_token>>","description":""},{"active":true,"key":"x-content-format","description":"","value":"badRequest"}],"body":{"contentType":null,"body":null},"v":"7","auth":{"authActive":true,"authType":"none"},"requestVariables":[],"endpoint":"<<base_url>>/users/delete-account","name":"16.1 - Delete user account - bad request","params":[],"method":"DELETE","preRequestScript":"","testScript":"let responseDUBR = pw.response.body;\n\npw.test(\"16.1 - Check delete user account - bad request success\", function () {\n    pw.expect(responseDUBR.success).toBe(false);\n});\npw.test(\"16.1 - Check delete user account - bad request status\", function () {\n    pw.expect(responseDUBR.status).toBe(400);\n});\npw.test(\"16.1 - Check delete user account - bad request message\", function () {\n    pw.expect(responseDUBR.message).toBe(\"Invalid X-Content-Format header, Only application/json is supported.\");\n});"},{"name":"16.2 - Delete user account - unauthorized request","endpoint":"<<base_url>>/users/delete-account","testScript":"let responseDUUR = pw.response.body;\n\npw.test(\"16.2 - Check delete user account - unauthorized request success\", function () {\n   pw.expect(responseDUUR.success).toBe(false);\n});\npw.test(\"16.2 - Check delete user account - unauthorized request status\", function () {\n    pw.expect(responseDUUR.status).toBe(401);\n});\npw.test(\"16.2 - Check delete user account - unauthorized request message\", function () {\n    pw.expect(responseDUUR.message).toBe(\"Access token is not valid or has expired, you will need to login\");\n});","headers":[{"active":true,"key":"X-Auth-Token","value":"@<<user_token>>","description":""},{"active":true,"value":"","key":"","description":""}],"method":"DELETE","preRequestScript":"","params":[],"requestVariables":[],"v":"7","body":{"contentType":null,"body":null},"auth":{"authActive":true,"authType":"none"}},{"v":"7","endpoint":"<<base_url>>/users/delete-account","requestVariables":[],"body":{"body":null,"contentType":null},"preRequestScript":"","name":"16.3 - Delete user account","testScript":"let responseDU = pw.response.body;\n\npw.test(\"16.1 - Check delete user account success\", function () {\n    pw.expect(responseDU.success).toBe(true);\n});\npw.test(\"16.1 - Check delete user account status\", function () {\n    pw.expect(responseDU.status).toBe(200);\n});\npw.test(\"16.1 - Check delete user account message\", function () {\n    pw.expect(responseDU.message).toBe(\"Account successfully deleted\");\n});","auth":{"authType":"none","authActive":true},"params":[],"method":"DELETE","headers":[{"active":true,"value":"<<user_token>>","description":"","key":"X-Auth-Token"}]}],"auth":{"authType":"inherit","authActive":true},"headers":[]}