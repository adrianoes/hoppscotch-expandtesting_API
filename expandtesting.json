{"v":3,"name":"expandtesting","folders":[],"requests":[{"auth":{"authActive":true,"authType":"none"},"endpoint":"<<base_url>>/health-check","params":[],"method":"GET","body":{"contentType":null,"body":null},"v":"7","name":"1 - Check the health of the API Notes services","testScript":"","requestVariables":[],"headers":[{"key":"","active":true,"description":"","value":""}],"preRequestScript":""},{"params":[],"v":"7","auth":{"authType":"none","authActive":true},"testScript":"let responseCU = pw.response.body;\n// let requestCU = pw.request;\n\npw.env.set(\"user_id\", responseCU.data.id);\npw.env.set(\"user_name\", responseCU.data.name);\npw.env.set(\"user_email\", responseCU.data.email);\n// pw.env.set(\"user_password\", requestCU.password);\n\npw.test(\"2.1 - Check creates a new user account success\", function () {\n    pw.expect(responseCU.success).toBe(true);\n});\npw.test(\"2.1 - Check creates a new user account status\", function () {\n    pw.expect(responseCU.status).toBe(201);\n});\npw.test(\"2.1 - Check creates a new user account message\", function () {\n    pw.expect(responseCU.message).toBe(\"User account created successfully\");\n});\npw.test(\"2.1 - Assert created name\", function () {\n    pw.expect(responseCU.data.name).toBe(pw.env.get(\"user_name\"));\n});\npw.test(\"2.1 - Assert created e-mail\", function () {\n    pw.expect(responseCU.data.email).toBe(pw.env.get(\"user_email\"));\n});\n\n","preRequestScript":"var random = Math.floor(Math.random() * 1000)+1000;\npw.env.set(\"randomValue\", random.toString());\nconsole.log(\"randomValue\");\n\npw.env.set(\"user_name\", pw.env.get(\"randomValue\")+\" test\");\n\n// let user_email_upper_case = \"{{$randomEmail}}\";\n// let user_email_lower_case = user_email_upper_case.toLowerCase();\n// pw.env.set(\"user_email\", user_email_lower_case);\npw.env.set(\"user_email\", pw.env.get(\"randomValue\")+\"@test.com\");\n\n// let user_password_preview = \"{{$randomPassword}}\";\n// pw.env.set(\"user_password\", user_password_preview);\npw.env.set(\"user_password\", pw.env.get(\"randomValue\")+\"_pw\");\n\n","headers":[],"endpoint":"<<base_url>>/users/register","body":{"contentType":"application/json","body":"{\n    \"name\":\"<<user_name>>\",\n    \"email\":\"<<user_email>>\",\n    \"password\":\"<<user_password>>\"\n}"},"requestVariables":[],"name":"2.1 - Creates a new user account","method":"POST"},{"headers":[],"auth":{"authActive":true,"authType":"none"},"v":"7","body":{"body":"{\n    \"name\":\"<<user_name>>\",\n    \"email\":\"@<<user_email>>\",\n    \"password\":\"<<user_password>>\"\n}","contentType":"application/json"},"requestVariables":[],"name":"2.2 - Creates a new user account  - bad request","params":[],"testScript":"let responseCUBR = pw.response.body;\n\npw.test(\"2.2 - Check creates a new user account - bad request success\", function () {\n    pw.expect(responseCUBR.success).toBe(false);\n});\npw.test(\"2.2 - Check creates a new user account - bad request status\", function () {\n    pw.expect(responseCUBR.status).toBe(400);\n});\npw.test(\"2.2 - Check creates a new user account - bad request message\", function () {\n    pw.expect(responseCUBR.message).toBe(\"A valid email address is required\");\n});","endpoint":"<<base_url>>/users/register","method":"POST","preRequestScript":""},{"testScript":"let responseLU = pw.response.body;\n\npw.env.set(\"user_token\", responseLU.data.token);\n\npw.test(\"3.1 - Check log in as an existing user success\", function () {\n    pw.expect(responseLU.success).toBe(true);\n});\npw.test(\"3.1 - Check log in as an existing user status\", function () {\n    pw.expect(responseLU.status).toBe(200);\n});\npw.test(\"3.1 - Check log in as an existing user message\", function () {\n    pw.expect(responseLU.message).toBe(\"Login successful\");\n});\npw.test(\"3.1 - Assert user id\", function () {\n    pw.expect(pw.env.get(\"user_id\")).toBe(responseLU.data.id);\n});\npw.test(\"3.1 - Assert user name\", function () {\n    pw.expect(pw.env.get(\"user_name\")).toBe(responseLU.data.name);\n});\npw.test(\"3.1 - Assert user e-mail\", function () {\n    pw.expect(pw.env.get(\"user_email\")).toBe(responseLU.data.email);\n});","body":{"contentType":"application/json","body":"{\r\n    \"email\":\"<<user_email>>\",\r\n    \"password\":\"<<user_password>>\"\r\n}"},"requestVariables":[],"v":"7","endpoint":"<<base_url>>/users/login","name":"3.1 - Log in as an existing user","preRequestScript":"","method":"POST","params":[],"headers":[],"auth":{"authType":"none","authActive":true}},{"requestVariables":[],"method":"POST","auth":{"authType":"none","authActive":true},"testScript":"let responseLUBR = pw.response.body;\n\npw.test(\"3.2 - Check log in as an existing user - bad request success\", function () {\n    pw.expect(responseLUBR.success).toBe(false);\n});\npw.test(\"3.2 - Check log in as an existing user - bad request status\", function () {\n    pw.expect(responseLUBR.status).toBe(400);\n});\npw.test(\"3.2 - Check log in as an existing user - bad request message\", function () {\n    pw.expect(responseLUBR.message).toBe(\"A valid email address is required\");\n});","body":{"body":"{\r\n    \"email\":\"@<<user_email>>\",\r\n    \"password\":\"<<user_password>>\"\r\n}","contentType":"application/json"},"endpoint":"<<base_url>>/users/login","preRequestScript":"","params":[],"v":"7","headers":[],"name":"3.2 - Log in as an existing user - bad request"},{"params":[],"name":"3.3 - Log in as an existing user - unauthorized request","method":"POST","v":"7","auth":{"authType":"none","authActive":true},"body":{"body":"{\r\n    \"email\":\"<<user_email>>\",\r\n    \"password\":\"@<<user_password>>\"\r\n}","contentType":"application/json"},"requestVariables":[],"testScript":"let responseLUUR = pw.response.body;\n\npw.test(\"3.3 - Check log in as an existing user - unauthorized request success\", function () {\n    pw.expect(responseLUUR.success).toBe(false);\n});\npw.test(\"3.3 - Check log in as an existing user - unauthorized request status\", function () {\n    pw.expect(responseLUUR.status).toBe(401);\n});\npw.test(\"3.3 - Check log in as an existing user - unauthorized request message\", function () {\n    pw.expect(responseLUUR.message).toBe(\"Incorrect email address or password\");\n});","headers":[],"endpoint":"<<base_url>>/users/login","preRequestScript":""},{"name":"4.1 - Retrieve user profile information","auth":{"authType":"none","authActive":true},"body":{"contentType":null,"body":null},"testScript":"let responseRU = pw.response.body;\n\npw.test(\"4.1 - Check retrieve user profile information success\", function () {\n    pw.expect(responseRU.success).toBe(true);\n});\npw.test(\"4.1 - Check retrieve user profile information status\", function () {\n    pw.expect(responseRU.status).toBe(200);\n});\npw.test(\"4.1 - Check retrieve user profile information message\", function () {\n    pw.expect(responseRU.message).toBe(\"Profile successful\");\n});\npw.test(\"4.1 - Assert user id\", function () {\n    pw.expect(pw.env.get(\"user_id\")).toBe(responseRU.data.id);\n});\npw.test(\"4.1 - Assert user name\", function () {\n    pw.expect(pw.env.get(\"user_name\")).toBe(responseRU.data.name);\n});\npw.test(\"4 - Assert user e-mail\", function () {\n    pw.expect(pw.env.get(\"user_email\")).toBe(responseRU.data.email);\n});","requestVariables":[],"headers":[{"key":"X-Auth-Token","value":"<<user_token>>","description":"","active":true}],"preRequestScript":"","params":[],"endpoint":"<<base_url>>/users/profile","method":"GET","v":"7"},{"preRequestScript":"","method":"GET","body":{"contentType":null,"body":null},"endpoint":"<<base_url>>/users/profile","name":"4.2 - Retrieve user profile information - bad request","testScript":"let responseRUBR = pw.response.body;\n\npw.test(\"4.2 - Check retrieve user profile information - bad request success\", function () {\n    pw.expect(responseRUBR.success).toBe(false);\n});\npw.test(\"4.2 - Check retrieve user profile information - bad request status\", function () {\n    pw.expect(responseRUBR.status).toBe(400);\n});\npw.test(\"4.2 - Check retrieve user profile information - bad request message\", function () {\n    pw.expect(responseRUBR.message).toBe(\"Invalid X-Content-Format header, Only application/json is supported.\");\n});","v":"7","requestVariables":[],"headers":[{"value":"<<user_token>>","description":"","key":"X-Auth-Token","active":true},{"active":true,"key":"x-content-format","value":"badRequest","description":""}],"auth":{"authType":"none","authActive":true},"params":[]},{"params":[],"v":"7","requestVariables":[],"name":"4.3 - Retrieve user profile information - unauthorized request","testScript":"let responseRUUR = pw.response.body;\n\npw.test(\"4.3 - Check retrieve user profile information - unauthorized request success\", function () {\n    pw.expect(responseRUUR.success).toBe(false);\n});\npw.test(\"4.3 - Check retrieve user profile information - unauthorized request status\", function () {\n    pw.expect(responseRUUR.status).toBe(401);\n});\npw.test(\"4.3 - Check retrieve user profile information - unauthorized request message\", function () {\n    pw.expect(responseRUUR.message).toBe(\"Access token is not valid or has expired, you will need to login\");\n});","preRequestScript":"","endpoint":"<<base_url>>/users/profile","body":{"body":null,"contentType":null},"auth":{"authType":"none","authActive":true},"headers":[{"active":true,"key":"X-Auth-Token","description":"","value":"@<<user_token>>"}],"method":"GET"},{"v":"7","headers":[{"value":"<<user_token>>","key":"X-Auth-Token","active":true,"description":""}],"testScript":"let responseUU = pw.response.body;\n// let requestUU = JSON.parse(pm.request.body.raw);\n\n// pw.env.set(\"user_name\", requestUU.name);\n// pw.env.set(\"user_phone\", requestUU.phone);\n// pw.env.set(\"user_company\", requestUU.company);\n\npw.test(\"5.1 - Check update the user profile information success\", function () {\n    pw.expect(responseUU.success).toBe(true);\n});\npw.test(\"5.1 - Check update the user profile information status\", function () {\n    pw.expect(responseUU.status).toBe(200);\n});\npw.test(\"5.1 - Check update the user profile information message\", function () {\n    pw.expect(responseUU.message).toBe(\"Profile updated successful\");\n});\npw.test(\"5.1 - Assert user id\", function () {\n    pw.expect(pw.env.get(\"user_id\")).toBe(responseUU.data.id);\n});\npw.test(\"5.1 - Assert user name\", function () {\n    pw.expect(pw.env.get(\"user_name\")).toBe(responseUU.data.name);\n});\npw.test(\"5.1 - Assert user e-mail\", function () {\n    pw.expect(pw.env.get(\"user_email\")).toBe(responseUU.data.email);\n});\npw.test(\"5.1 - Assert user phone\", function () {\n    pw.expect(pw.env.get(\"user_phone\")).toBe(responseUU.data.phone);\n});\npw.test(\"5.1 - Assert user company\", function () {\n    pw.expect(pw.env.get(\"user_company\")).toBe(responseUU.data.company);\n});\n\n\n","body":{"contentType":"application/json","body":"{\n    \"name\":\"<<user_name>>\",\n    \"phone\":\"<<user_phone>>\",\n    \"company\":\"<<user_company>>\"\n}"},"auth":{"authActive":true,"authType":"none"},"endpoint":"<<base_url>>/users/profile","preRequestScript":"var random = Math.floor(Math.random() * 100000)+1000000000;\npw.env.set(\"randomValue\", random.toString());\nconsole.log(\"randomValue\");\n\npw.env.set(\"user_name\", pw.env.get(\"randomValue\")+\" test\");\n\n// let user_email_upper_case = \"{{$randomEmail}}\";\n// let user_email_lower_case = user_email_upper_case.toLowerCase();\n// pw.env.set(\"user_email\", user_email_lower_case);\npw.env.set(\"user_phone\", pw.env.get(\"randomValue\"));\nconsole.log(\"user_phone\")\n// let user_password_preview = \"{{$randomPassword}}\";\n// pw.env.set(\"user_password\", user_password_preview);\npw.env.set(\"user_company\", pw.env.get(\"randomValue\")+\" S.A.\");","requestVariables":[],"params":[],"name":"5.1 - Update the user profile information","method":"PATCH"},{"name":"5.2 - Update the user profile information - bad request","method":"PATCH","testScript":"let responseUUBR = pw.response.body;\n\npw.test(\"5.2 - Check update the user profile information - bad request success\", function () {\n    pw.expect(responseUUBR.success).toBe(false);\n});\npw.test(\"5.2 - Check update the user profile information - bad request status\", function () {\n    pw.expect(responseUUBR.status).toBe(400);\n});\npw.test(\"5.2 - Check update the user profile information - bad request message\", function () {\n    pw.expect(responseUUBR.message).toBe(\"User name must be between 4 and 30 characters\");\n});","params":[],"endpoint":"<<base_url>>/users/profile","body":{"body":"{\n    \"name\":\"6@#\",\n    \"phone\":\"<<user_phone>>\",\n    \"company\":\"<<user_company>>\"\n}","contentType":"application/json"},"headers":[{"active":true,"key":"X-Auth-Token","value":"<<user_token>>","description":""}],"auth":{"authType":"none","authActive":true},"requestVariables":[],"v":"7","preRequestScript":""},{"name":"5.3 - Update the user profile information - unauthorized request","method":"PATCH","auth":{"authType":"none","authActive":true},"testScript":"let responseUUUR = pw.response.body;\n\npw.test(\"5.3 - Check update the user profile information - unauthorized request success\", function () {\n    pw.expect(responseUUUR.success).toBe(false);\n});\npw.test(\"5.3 - Check update the user profile information - unauthorized request status\", function () {\n    pw.expect(responseUUUR.status).toBe(401);\n});\npw.test(\"5.3 - Check update the user profile information - unauthorized request message\", function () {\n    pw.expect(responseUUUR.message).toBe(\"Access token is not valid or has expired, you will need to login\");\n});","headers":[{"key":"X-Auth-Token","description":"","active":true,"value":"@<<user_token>>"}],"endpoint":"<<base_url>>/users/profile","v":"7","params":[],"preRequestScript":"","body":{"body":"{\r\n    \"name\":\"<<$randomFullName>>\",\r\n    \"phone\":\"<<user_phone>>\",\r\n    \"company\":\"<<$randomCompanyName>>\"\r\n}","contentType":"application/json"},"requestVariables":[]},{"params":[],"body":{"contentType":"application/json","body":"{\n    \"currentPassword\":\"<<user_password>>\",\n    \"newPassword\":\"<<new_user_password>>\"\n}"},"preRequestScript":"var random = Math.floor(Math.random() * 1000)+1000;\npw.env.set(\"randomValue\", random.toString());\nconsole.log(\"randomValue\");\n\npw.env.set(\"new_user_password\", pw.env.get(\"randomValue\")+\"_new_pw\");","headers":[{"active":true,"value":"<<user_token>>","description":"","key":"X-Auth-Token"}],"testScript":"let responseCUP = pw.response.body;\n\npw.test(\"6.1 - Check api health success\", function () {\n    pw.expect(responseCUP.success).toBe(true);\n});\npw.test(\"6.1 - Check api health status\", function () {\n    pw.expect(responseCUP.status).toBe(200);\n});\npw.test(\"6.1 - Check api health message\", function () {\n    pw.expect(responseCUP.message).toBe(\"The password was successfully updated\");\n});","requestVariables":[],"v":"7","endpoint":"<<base_url>>/users/change-password","name":"6.1 - Change a user's password","auth":{"authType":"none","authActive":true},"method":"POST"},{"body":{"body":"{\r\n    \"currentPassword\":\"<<user_password>>\",\r\n    \"newPassword\":\"123\"\r\n}","contentType":"application/json"},"auth":{"authActive":true,"authType":"none"},"headers":[{"value":"<<user_token>>","description":"","active":true,"key":"X-Auth-Token"}],"requestVariables":[],"testScript":"let responseCUPBR = pw.response.body;\n\npw.test(\"6.2 - Check api health - bad request success\", function () {\n    pw.expect(responseCUPBR.success).toBe(false);\n});\npw.test(\"6.2 - Check api health - bad request status\", function () {\n    pw.expect(responseCUPBR.status).toBe(400);\n});\npw.test(\"6.2 - Check api health - bad request message\", function () {\n    pw.expect(responseCUPBR.message).toBe(\"New password must be between 6 and 30 characters\");\n});","preRequestScript":"","name":"6.2 - Change a user's password - bad request","method":"POST","endpoint":"<<base_url>>/users/change-password","v":"7","params":[]},{"method":"POST","headers":[{"value":"@<<user_token>>","description":"","key":"X-Auth-Token","active":true}],"requestVariables":[],"auth":{"authActive":true,"authType":"none"},"v":"7","body":{"body":"{\r\n    \"currentPassword\":\"<<user_password>>\",\r\n    \"newPassword\":\"<<$randomPassword>>\"\r\n}","contentType":"application/json"},"testScript":"let responseCUPUR = pw.response.body;\n\npw.test(\"6.3 - Check api health - unauthorized request success\", function () {\n    pw.expect(responseCUPUR.success).toBe(false);\n});\npw.test(\"6.3 - Check api health - unauthorized request status\", function () {\n    pw.expect(responseCUPUR.status).toBe(401);\n});\npw.test(\"6.3 - Check api health - unauthorized request message\", function () {\n    pw.expect(responseCUPUR.message).toBe(\"Access token is not valid or has expired, you will need to login\");\n});","params":[],"endpoint":"<<base_url>>/users/change-password","preRequestScript":"","name":"6.3 - Change a user's password - unauthorized request"},{"headers":[{"value":"<<user_token>>","key":"X-Auth-Token","description":"","active":true}],"endpoint":"<<base_url>>/notes","requestVariables":[],"testScript":"let responseCN = pw.response.body;\n\npw.env.set(\"note_id\", responseCN.data.id);\n// Hoppscotch fails to grab boolean value from response body\npw.env.set(\"note_completed\", responseCN.data.completed.toString());\npw.env.set(\"note_created_at\", responseCN.data.created_at);\npw.env.set(\"note_updated_at\", responseCN.data.updated_at);\n\npw.test(\"7.1 - Check creates a new note success\", function () {\n    pw.expect(responseCN.success).toBe(true);\n});\npw.test(\"7.1 - Check creates a new note status\", function () {\n    pw.expect(responseCN.status).toBe(200);\n});\npw.test(\"7.1 - Check creates a new note message\", function () {\n    pw.expect(responseCN.message).toBe(\"Note successfully created\");\n});\npw.test(\"7.1 - Assert note title\", function () {\n    pw.expect(pw.env.get(\"note_title\")).toBe(responseCN.data.title);\n});\npw.test(\"7.1 - Assert note description\", function () {\n    pw.expect(pw.env.get(\"note_description\")).toBe(responseCN.data.description);\n});\npw.test(\"7.1 - Assert note category\", function () {\n    pw.expect(pw.env.get(\"note_category\")).toBe(responseCN.data.category);\n});\npw.test(\"7.1 - Assert user id\", function () {\n    pw.expect(pw.env.get(\"user_id\")).toBe(responseCN.data.user_id);\n});","v":"7","params":[],"preRequestScript":"var categoryArray = ['Home', 'Work', 'Personal'];\nvar random = Math.floor(Math.random() * 1000)+1000;\npw.env.set(\"randomValue\", random.toString());\nconsole.log(\"randomValue\");\n\npw.env.set(\"note_category\", categoryArray[Math.floor(Math.random()*categoryArray.length)]);\npw.env.set(\"note_description\", pw.env.get(\"randomValue\")+\" description\");\npw.env.set(\"note_title\", pw.env.get(\"randomValue\")+\" title\");","auth":{"authActive":true,"authType":"none"},"method":"POST","name":"7.1 - Creates a new note","body":{"body":"{\n    \"title\":\"<<note_title>>\",\n    \"description\":\"<<note_description>>\",\n    \"category\":\"<<note_category>>\"\n}","contentType":"application/json"}},{"body":{"contentType":"application/json","body":"{\n    \"title\":\"<<note_title>>\",\n    \"description\":\"<<note_description>>\",\n    \"category\":\"a\"\n}"},"endpoint":"<<base_url>>/notes","v":"7","testScript":"let responseCNBR = pw.response.body;\n\npw.test(\"7.2 - Check creates a new note - bad request success\", function () {\n    pw.expect(responseCNBR.success).toBe(false);\n});\npw.test(\"7.2 - Check creates a new note - bad request status\", function () {\n    pw.expect(responseCNBR.status).toBe(400);\n});\npw.test(\"7.2 - Check creates a new note - bad request message\", function () {\n    pw.expect(responseCNBR.message).toBe(\"Category must be one of the categories: Home, Work, Personal\");\n});\n","method":"POST","name":"7.2 - Creates a new note - bad request","params":[],"auth":{"authType":"none","authActive":true},"requestVariables":[],"headers":[{"active":true,"description":"","value":"<<user_token>>","key":"X-Auth-Token"}],"preRequestScript":""},{"v":"7","method":"POST","preRequestScript":"","requestVariables":[],"auth":{"authType":"none","authActive":true},"headers":[{"value":"@<<user_token>>","description":"","active":true,"key":"X-Auth-Token"}],"params":[],"endpoint":"<<base_url>>/notes","body":{"contentType":"application/json","body":"{\r\n    \"title\":\"<<$randomWord>> <<$randomWord>>\",\r\n    \"description\":\"<<$randomWord>> <<$randomWord>> <<$randomWord>>\",\r\n    \"category\":\"<<note_category_UR>>\"\r\n}"},"testScript":"let responseCNUR = pw.response.body;\n\npw.test(\"7.3 - Check creates a new note - unauthorized request success\", function () {\n    pw.expect(responseCNUR.success).toBe(false);\n});\npw.test(\"7.3 - Check creates a new note - unauthorized request status\", function () {\n    pw.expect(responseCNUR.status).toBe(401);\n});\npw.test(\"7.3 - Check creates a new note - unauthorized request message\", function () {\n    pw.expect(responseCNUR.message).toBe(\"Access token is not valid or has expired, you will need to login\");\n});\n","name":"7.3 - Creates a new note - unauthorized request"},{"name":"8 - Creates another new note","auth":{"authActive":true,"authType":"none"},"headers":[{"value":"<<user_token>>","active":true,"key":"X-Auth-Token","description":""}],"preRequestScript":"var categoryArray = ['Home', 'Work', 'Personal'];\nvar random = Math.floor(Math.random() * 1000)+1000;\npw.env.set(\"randomValue\", random.toString());\nconsole.log(\"randomValue\");\n\npw.env.set(\"note_category_2\", categoryArray[Math.floor(Math.random()*categoryArray.length)]);\npw.env.set(\"note_description_2\", pw.env.get(\"randomValue\")+\" description\");\npw.env.set(\"note_title_2\", pw.env.get(\"randomValue\")+\" title\");","testScript":"let responseCN = pw.response.body;\n\npw.env.set(\"note_id_2\", responseCN.data.id);\n// Hoppscotch fails to grab boolean value from response body\npw.env.set(\"note_completed_2\", responseCN.data.completed.toString());\npw.env.set(\"note_created_at_2\", responseCN.data.created_at);\npw.env.set(\"note_updated_at_2\", responseCN.data.updated_at);\n\npw.test(\"7.1 - Check creates a new note success\", function () {\n    pw.expect(responseCN.success).toBe(true);\n});\npw.test(\"7.1 - Check creates a new note status\", function () {\n    pw.expect(responseCN.status).toBe(200);\n});\npw.test(\"7.1 - Check creates a new note message\", function () {\n    pw.expect(responseCN.message).toBe(\"Note successfully created\");\n});\npw.test(\"7.1 - Assert note title\", function () {\n    pw.expect(pw.env.get(\"note_title_2\")).toBe(responseCN.data.title);\n});\npw.test(\"7.1 - Assert note description\", function () {\n    pw.expect(pw.env.get(\"note_description_2\")).toBe(responseCN.data.description);\n});\npw.test(\"7.1 - Assert note category\", function () {\n    pw.expect(pw.env.get(\"note_category_2\")).toBe(responseCN.data.category);\n});\npw.test(\"7.1 - Assert user id\", function () {\n    pw.expect(pw.env.get(\"user_id\")).toBe(responseCN.data.user_id);\n});","params":[],"v":"7","requestVariables":[],"endpoint":"<<base_url>>/notes","method":"POST","body":{"body":"{\n    \"title\":\"<<note_title_2>>\",\n    \"description\":\"<<note_description_2>>\",\n    \"category\":\"<<note_category_2>>\"\n}","contentType":"application/json"}},{"method":"GET","body":{"body":null,"contentType":null},"name":"9.1 - Get all notes","endpoint":"<<base_url>>/notes","auth":{"authActive":true,"authType":"none"},"testScript":"","v":"7","headers":[{"value":"<<user_token>>","description":"","key":"X-Auth-Token","active":true}],"requestVariables":[],"preRequestScript":"","params":[]},{"testScript":"","params":[],"method":"GET","requestVariables":[],"preRequestScript":"","headers":[{"key":"X-Auth-Token","value":"<<user_token>>","description":"","active":true},{"key":"x-content-format","description":"","value":"badRequest","active":true}],"v":"7","body":{"contentType":null,"body":null},"endpoint":"<<base_url>>/notes","auth":{"authType":"none","authActive":true},"name":"9.2 - Get all notes - bad request"},{"name":"9.3 - Get all notes - unauthorized request","endpoint":"<<base_url>>/notes","auth":{"authType":"none","authActive":true},"headers":[{"active":true,"description":"","value":"@<<user_token>>","key":"X-Auth-Token"},{"key":"","description":"","value":"","active":true}],"preRequestScript":"","method":"GET","params":[],"v":"7","body":{"contentType":null,"body":null},"requestVariables":[],"testScript":""},{"name":"10.1 - Get note by ID","testScript":"","endpoint":"<<base_url>>/notes/<<note_id>>","body":{"body":null,"contentType":null},"params":[],"preRequestScript":"","requestVariables":[],"headers":[{"key":"X-Auth-Token","value":"<<user_token>>","description":"","active":true}],"v":"7","method":"GET","auth":{"authActive":true,"authType":"none"}},{"v":"7","testScript":"","method":"GET","auth":{"authActive":true,"authType":"none"},"preRequestScript":"","requestVariables":[],"headers":[{"active":true,"description":"","key":"X-Auth-Token","value":"<<user_token>>"},{"active":true,"description":"","value":"badRequest","key":"x-content-format"}],"endpoint":"<<base_url>>/notes/<<note_id>>","name":"10.2 - Get note by ID - bad request","params":[],"body":{"contentType":null,"body":null}},{"preRequestScript":"","auth":{"authActive":true,"authType":"none"},"method":"GET","testScript":"","name":"10.3 - Get note by ID - unauthorized request","body":{"body":null,"contentType":null},"headers":[{"active":true,"description":"","key":"X-Auth-Token","value":"@<<user_token>>"},{"value":"","active":true,"key":"","description":""}],"endpoint":"<<base_url>>/notes/<<note_id>>","v":"7","params":[],"requestVariables":[]},{"endpoint":"<<base_url>>/notes/<<note_id>>","headers":[{"value":"<<user_token>>","description":"","active":true,"key":"X-Auth-Token"}],"requestVariables":[],"auth":{"authType":"none","authActive":true},"params":[],"body":{"contentType":"application/json","body":"{\r\n    \"title\":\"<<$randomWord>> <<$randomWord>>\",\r\n    \"description\":\"<<$randomWord>> <<$randomWord>> <<$randomWord>>\",\r\n    \"category\":\"<<note_category>>\",\r\n    \"completed\":\"<<$randomBoolean>>\"\r\n}"},"v":"7","testScript":"","method":"PUT","preRequestScript":"","name":"11.1 - Update an existing note"},{"preRequestScript":"","headers":[{"active":true,"key":"X-Auth-Token","value":"<<user_token>>","description":""}],"body":{"contentType":"application/json","body":"{\r\n    \"title\":\"<<$randomWord>> <<$randomWord>>\",\r\n    \"description\":\"<<$randomWord>> <<$randomWord>> <<$randomWord>>\",\r\n    \"category\":\"a\",\r\n    \"completed\":\"<<$randomBoolean>>\"\r\n}"},"name":"11.2 - Update an existing note - bad request","testScript":"","requestVariables":[],"v":"7","params":[],"auth":{"authType":"none","authActive":true},"endpoint":"<<base_url>>/notes/<<note_id>>","method":"PUT"},{"auth":{"authType":"none","authActive":true},"preRequestScript":"","v":"7","name":"11.3 - Update an existing note - unauthorized request","method":"PUT","requestVariables":[],"testScript":"","body":{"body":"{\r\n    \"title\":\"<<$randomWord>> <<$randomWord>>\",\r\n    \"description\":\"<<$randomWord>> <<$randomWord>> <<$randomWord>>\",\r\n    \"category\":\"<<note_category_UR>>\",\r\n    \"completed\":\"<<$randomBoolean>>\"\r\n}","contentType":"application/json"},"params":[],"headers":[{"value":"@<<user_token>>","key":"X-Auth-Token","active":true,"description":""}],"endpoint":"<<base_url>>/notes/<<note_id>>"},{"endpoint":"<<base_url>>/notes/<<note_id>>","v":"7","params":[],"requestVariables":[],"headers":[{"description":"","active":true,"value":"<<user_token>>","key":"X-Auth-Token"}],"preRequestScript":"","auth":{"authType":"none","authActive":true},"name":"12.1 - Update the completed status of a note","testScript":"","method":"PATCH","body":{"body":"{\r\n    \"completed\":\"<<note_completed>>\"\r\n}","contentType":"application/json"}},{"method":"PATCH","auth":{"authType":"none","authActive":true},"preRequestScript":"","endpoint":"<<base_url>>/notes/<<note_id>>","headers":[{"key":"X-Auth-Token","active":true,"value":"<<user_token>>","description":""}],"body":{"body":"{\r\n    \"completed\":\"a\"\r\n}","contentType":"application/json"},"params":[],"requestVariables":[],"v":"7","testScript":"","name":"12.2 - Update the completed status of a note - bad request"},{"headers":[{"key":"X-Auth-Token","description":"","value":"@<<user_token>>","active":true}],"auth":{"authActive":true,"authType":"none"},"endpoint":"<<base_url>>/notes/<<note_id>>","v":"7","body":{"contentType":"application/json","body":"{\r\n    \"completed\":\"<<note_completed_UR>>\"\r\n}"},"name":"12.3 - Update the completed status of a note - unauthorized request","testScript":"","preRequestScript":"","params":[],"method":"PATCH","requestVariables":[]},{"v":"7","requestVariables":[],"headers":[{"description":"","value":"<<user_token>>","key":"X-Auth-Token","active":true}],"endpoint":"<<base_url>>/notes/@<<note_id>>","auth":{"authType":"none","authActive":true},"params":[],"name":"13.1 - Delete a note by ID - bad request","method":"DELETE","preRequestScript":"","body":{"contentType":null,"body":null},"testScript":""},{"testScript":"","v":"7","name":"13.2 - Delete a note by ID - unauthorized request","body":{"body":null,"contentType":null},"preRequestScript":"","params":[],"method":"DELETE","auth":{"authType":"none","authActive":true},"headers":[{"key":"X-Auth-Token","description":"","value":"@<<user_token>>","active":true}],"endpoint":"<<base_url>>/notes/<<note_id>>","requestVariables":[]},{"params":[],"requestVariables":[],"body":{"contentType":null,"body":null},"testScript":"","headers":[{"active":true,"key":"X-Auth-Token","description":"","value":"<<user_token>>"}],"name":"13.3 - Delete a note by ID","method":"DELETE","endpoint":"<<base_url>>/notes/<<note_id>>","auth":{"authActive":true,"authType":"none"},"preRequestScript":"","v":"7"},{"name":"14.1 - Log out a user - bad request","headers":[{"active":true,"key":"X-Auth-Token","value":"<<user_token>>","description":""},{"active":true,"key":"x-content-format","description":"","value":"badRequest"}],"params":[],"endpoint":"<<base_url>>/users/logout","auth":{"authActive":true,"authType":"none"},"preRequestScript":"","v":"7","body":{"contentType":null,"body":null},"testScript":"","method":"DELETE","requestVariables":[]},{"params":[],"auth":{"authType":"none","authActive":true},"preRequestScript":"","headers":[{"description":"","active":true,"value":"@<<user_token>>","key":"X-Auth-Token"},{"value":"","key":"","description":"","active":true}],"endpoint":"<<base_url>>/users/logout","body":{"body":null,"contentType":null},"testScript":"","name":"14.2 - Log out a user - unauthorized request","requestVariables":[],"v":"7","method":"DELETE"},{"preRequestScript":"","params":[],"headers":[{"value":"<<user_token>>","description":"","active":true,"key":"X-Auth-Token"}],"testScript":"","auth":{"authActive":true,"authType":"none"},"method":"DELETE","body":{"body":null,"contentType":null},"requestVariables":[],"name":"14.3 - Log out a user","endpoint":"<<base_url>>/users/logout","v":"7"},{"body":{"body":"{\r\n    \"email\":\"<<user_email>>\",\r\n    \"password\":\"<<user_password>>\"\r\n}","contentType":"application/json"},"auth":{"authType":"none","authActive":true},"preRequestScript":"","headers":[],"method":"POST","name":"15 - Log in after log out","v":"7","requestVariables":[],"params":[],"endpoint":"<<base_url>>/users/login","testScript":""},{"params":[],"body":{"contentType":null,"body":null},"headers":[{"active":true,"value":"<<user_token>>","description":"","key":"X-Auth-Token"},{"value":"badRequest","key":"x-content-format","active":true,"description":""}],"requestVariables":[],"name":"16.1 - Delete user account - bad request","endpoint":"<<base_url>>/users/delete-account","testScript":"","method":"DELETE","v":"7","auth":{"authActive":true,"authType":"none"},"preRequestScript":""},{"testScript":"","endpoint":"<<base_url>>/users/delete-account","requestVariables":[],"params":[],"name":"16.2 - Delete user account - unauthorized request","auth":{"authActive":true,"authType":"none"},"v":"7","preRequestScript":"","body":{"body":null,"contentType":null},"headers":[{"description":"","key":"X-Auth-Token","active":true,"value":"@<<user_token>>"},{"description":"","active":true,"value":"","key":""}],"method":"DELETE"},{"name":"16.1 - Delete user account","testScript":"let responseDU = pw.response.body;\n\npw.test(\"16.1 - Check delete user account success\", function () {\n    pw.expect(responseDU.success).toBe(true);\n});\npw.test(\"16.1 - Check delete user account status\", function () {\n    pw.expect(responseDU.status).toBe(200);\n});\npw.test(\"16.1 - Check delete user account message\", function () {\n    pw.expect(responseDU.message).toBe(\"Account successfully deleted\");\n});","body":{"contentType":null,"body":null},"headers":[{"value":"<<user_token>>","active":true,"key":"X-Auth-Token","description":""}],"preRequestScript":"","v":"7","auth":{"authActive":true,"authType":"none"},"requestVariables":[],"params":[],"endpoint":"<<base_url>>/users/delete-account","method":"DELETE"}],"auth":{"authActive":true,"authType":"inherit"},"headers":[]}